// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fieldday

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FieldDayClient is the client API for FieldDay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldDayClient interface {
	AddVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*TotalNum, error)
	GetTotal(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TotalNum, error)
	ListVisitors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FieldDay_ListVisitorsClient, error)
}

type fieldDayClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldDayClient(cc grpc.ClientConnInterface) FieldDayClient {
	return &fieldDayClient{cc}
}

func (c *fieldDayClient) AddVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*TotalNum, error) {
	out := new(TotalNum)
	err := c.cc.Invoke(ctx, "/fieldday.FieldDay/addVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldDayClient) GetTotal(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TotalNum, error) {
	out := new(TotalNum)
	err := c.cc.Invoke(ctx, "/fieldday.FieldDay/getTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldDayClient) ListVisitors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (FieldDay_ListVisitorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FieldDay_ServiceDesc.Streams[0], "/fieldday.FieldDay/listVisitors", opts...)
	if err != nil {
		return nil, err
	}
	x := &fieldDayListVisitorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FieldDay_ListVisitorsClient interface {
	Recv() (*Visitor, error)
	grpc.ClientStream
}

type fieldDayListVisitorsClient struct {
	grpc.ClientStream
}

func (x *fieldDayListVisitorsClient) Recv() (*Visitor, error) {
	m := new(Visitor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FieldDayServer is the server API for FieldDay service.
// All implementations must embed UnimplementedFieldDayServer
// for forward compatibility
type FieldDayServer interface {
	AddVisitor(context.Context, *Visitor) (*TotalNum, error)
	GetTotal(context.Context, *empty.Empty) (*TotalNum, error)
	ListVisitors(*empty.Empty, FieldDay_ListVisitorsServer) error
	mustEmbedUnimplementedFieldDayServer()
}

// UnimplementedFieldDayServer must be embedded to have forward compatible implementations.
type UnimplementedFieldDayServer struct {
}

func (UnimplementedFieldDayServer) AddVisitor(context.Context, *Visitor) (*TotalNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVisitor not implemented")
}
func (UnimplementedFieldDayServer) GetTotal(context.Context, *empty.Empty) (*TotalNum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotal not implemented")
}
func (UnimplementedFieldDayServer) ListVisitors(*empty.Empty, FieldDay_ListVisitorsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVisitors not implemented")
}
func (UnimplementedFieldDayServer) mustEmbedUnimplementedFieldDayServer() {}

// UnsafeFieldDayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldDayServer will
// result in compilation errors.
type UnsafeFieldDayServer interface {
	mustEmbedUnimplementedFieldDayServer()
}

func RegisterFieldDayServer(s grpc.ServiceRegistrar, srv FieldDayServer) {
	s.RegisterService(&FieldDay_ServiceDesc, srv)
}

func _FieldDay_AddVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Visitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldDayServer).AddVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fieldday.FieldDay/addVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldDayServer).AddVisitor(ctx, req.(*Visitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldDay_GetTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldDayServer).GetTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fieldday.FieldDay/getTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldDayServer).GetTotal(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldDay_ListVisitors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FieldDayServer).ListVisitors(m, &fieldDayListVisitorsServer{stream})
}

type FieldDay_ListVisitorsServer interface {
	Send(*Visitor) error
	grpc.ServerStream
}

type fieldDayListVisitorsServer struct {
	grpc.ServerStream
}

func (x *fieldDayListVisitorsServer) Send(m *Visitor) error {
	return x.ServerStream.SendMsg(m)
}

// FieldDay_ServiceDesc is the grpc.ServiceDesc for FieldDay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FieldDay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fieldday.FieldDay",
	HandlerType: (*FieldDayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addVisitor",
			Handler:    _FieldDay_AddVisitor_Handler,
		},
		{
			MethodName: "getTotal",
			Handler:    _FieldDay_GetTotal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listVisitors",
			Handler:       _FieldDay_ListVisitors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fieldday/fieldday.proto",
}
